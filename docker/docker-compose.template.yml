version: '3.4'

services:
  blog:
    image: nkonev/blog:current-test
    logging:
      driver: "json-file"
#      options:
#        tag: blog
    deploy:
      replicas: 2
      labels:
        - traefik.enable=true
        - traefik.backend=blog
        - traefik.frontend.rule=PathPrefix:/;Host:blog.test
        - traefik.port=8098
        - traefik.docker.network=proxy_backend
    environment:
      # https://stackoverflow.com/questions/28327620/difference-between-java-options-java-tool-options-and-java-opts
      # https://blogs.oracle.com/poonam/about-g1-garbage-collector%2c-permanent-generation-and-metaspace
      - _JAVA_OPTIONS=-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=256M -XX:OnOutOfMemoryError="kill -9 %p" -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts -Djavax.net.ssl.trustStorePassword=changeit -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/blog
      - SPRING_PROFILES_ACTIVE=demo
      - SERVER_PORT=8098
      - CUSTOM_STOMP_BROKER_HOST=rabbitmq
      - CUSTOM_STOMP_BROKER_PORT=61613
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/blog?connectTimeout=10&socketTimeout=40
      - SPRING_REDIS_URL=redis://redis:6379/0
      - SPRING_RESOURCES_STATIC-LOCATIONS=file:/opt/blog/www/, classpath:/static/
      - CUSTOM_PRERENDER_ENABLE=true
      - CUSTOM_PRERENDER_PRERENDER-SERVICE-URL=http://prerender:3000/
      - CUSTOM_PRERENDER_CRAWLER-USER-AGENTS=googlebot,prometheus
      - CUSTOM_PRERENDER_FORWARDED-URL-PREFIX=http://blog:8098
#      - LOGGING_LEVEL_COM_GITHUB_GREENGERONG_PRERENDER-SEO-SERVICE=TRACE
      - SPRING_MAIL_HOST=smtp.yandex.ru
      - CUSTOM_EMAIL_FROM=username@yandex.ru
      - SPRING_MAIL_USERNAME=username
      - SPRING_MAIL_PASSWORD=password
      - CUSTOM_BASE-URL=http://blog.test # also used for prerender's forwardedURLPrefix
      - MANAGEMENT_HEALTH_MAIL_ENABLED=false
    volumes :
      - ./www:/opt/blog/www
    ports:
      - 8098:8098
      - 3020:3010
    networks:
      - traefik_backend
      - backend
  traefik:
    image: traefik:1.5
    hostname: traefik
    command: -c /traefik.toml
    ports:
      # need for visibility real ip in traefik logs
      # https://docs.docker.com/engine/swarm/services/#publish-a-services-ports-directly-on-the-swarm-node
      # https://docs.docker.com/compose/compose-file/#long-syntax-1
      # https://stackoverflow.com/questions/39854682/log-clients-real-ip-address-in-docker-swarm-1-12-when-accessing-a-service
      - target: 80
        published: 8088
        mode: host
      - target: 443
        published: 8445
        mode: host
      - "10000:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/traefik.toml
#      - /dev/null:/traefik.toml
      - ./traefik/acme.json:/acme.json
    depends_on:
      - blog
    logging:
      driver: "json-file"
#      options:
#        tag: traefik
    networks:
      - traefik_backend
      - backend
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 8092:8080
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    logging:
      driver: "json-file"
#      options:
#        tag: visualizer
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - traefik_backend

  postgresql:
    image: postgres:10.3
    hostname: postgresql
    environment:
      - POSTGRES_PASSWORD=postgresqlPassword
    volumes :
      - ./postgresql_prod/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgresql_prod_data_dir:/var/lib/postgresql/data
    logging:
      driver: "json-file"
#      options:
#        tag: postgresql
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  redis:
    image: redis:4.0.8
    hostname: redis
    volumes :
      - redis_prod_data_dir:/data
    logging:
      driver: "json-file"
#      options:
#        tag: redis
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  rabbitmq:
    image: nkonev/rabbitmq-web-stomp:3.7.3
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=blog
      - RABBITMQ_DEFAULT_PASS=blogPazZw0rd
      - RABBITMQ_NODENAME=my-rabbit
    volumes :
      - rabbitmq_prod_data_dir:/var/lib/rabbitmq/mnesia
    logging:
      driver: "json-file"
#      options:
#        tag: rabbitmq
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  prerender:
    image: nkonev/prerender-redis
    hostname: prerender
    volumes:
      - redis_prerender_prod_data_dir:/var/lib/redis
    logging:
      driver: "json-file"
#      options:
#        tag: prerender
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - traefik_backend
      - backend
  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter
    hostname: rabbitmq_exporter
    ports:
      - 9191:9191
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=blog
      - RABBIT_PASSWORD=blogPazZw0rd
      - PUBLISH_PORT=9191
    logging:
      driver: "json-file"
#      options:
#        tag: rabbitmq_exporter
    networks:
      - backend
  postgresql_exporter:
    image: wrouesnel/postgres_exporter
    hostname: postgresql_exporter
    ports:
      - 9187:9187
    volumes:
      - ./postgresql_exporter/queries.yaml:/queries.yaml
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgresqlPassword@postgresql:5432/blog?sslmode=disable
    command: ["--extend.query-path", "/queries.yaml"]
    logging:
      driver: "json-file"
#      options:
#        tag: postgresql_exporter
    networks:
      - traefik_backend
      - backend
  redis_exporter:
    image: oliver006/redis_exporter
    hostname: redis_exporter
    ports:
      - 9121:9121
    environment:
      - REDIS_ADDR=redis://redis:6379
    logging:
      driver: "json-file"
#      options:
#        tag: redis_exporter
    networks:
      - backend
  node_exporter:
    image: prom/node-exporter
    hostname: 'node_exporter'
    ports:
      - '9100:9100'
    command: ["--log.level", "fatal", "--log.format", "logger:stdout"]
    logging:
      driver: "json-file"
#      options:
#        tag: node_exporter
    networks:
      - backend
  blackbox_exporter:
    image: prom/blackbox-exporter:v0.11.0
    hostname: 'blackbox_exporter'
    ports:
      - '9115:9115'
    volumes:
      - ./blackbox_exporter/blackbox.yml:/config/blackbox.yml
    command: ['--config.file=/config/blackbox.yml']
    logging:
      driver: "json-file"
#      options:
#        tag: blackbox_exporter
    networks:
      - traefik_backend
      - backend
  prometheus:
    image: prom/prometheus:v2.0.0
    hostname: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerting.yml:/etc/prometheus/alerting.yml
      - prometheus_data:/prometheus
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=prometheus
        - traefik.frontend.rule=PathPrefix:/;Host:prometheus.blog.test
        - traefik.port=9090
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: prometheus
    networks:
      - traefik_backend
      - backend

  alertmanager:
    image: prom/alertmanager:v0.13.0
    hostname: alertmanager
    volumes:
      - ./alertmanager/alert.yml:/alert.yml
    command: ["--config.file", "/alert.yml", "--web.external-url", "http://alertmanager.blog.test"]
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=alertmanager
        - traefik.frontend.rule=PathPrefix:/;Host:alertmanager.blog.test
        - traefik.port=9093
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: alertmanager
    networks:
      - backend
      - traefik_backend

  grafana:
    image: grafana/grafana:5.0.0-beta1
    hostname: grafana
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://grafana
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_prod_data_dir:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=grafana
        - traefik.frontend.rule=PathPrefix:/;Host:grafana.blog.test
        - traefik.port=3000
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: grafana
    networks:
      - traefik_backend
      - backend
volumes:
  #enviroment
  postgresql_prod_data_dir:
  redis_prod_data_dir:
  rabbitmq_prod_data_dir:
  redis_prerender_prod_data_dir:
  prometheus_data:
  grafana_data_prod_data_dir:

networks:
  backend:
    driver: overlay
  traefik_backend:
    external:
      name: proxy_backend        
