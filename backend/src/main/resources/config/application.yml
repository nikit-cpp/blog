# This file was autogenerated via configs-generator
# Please do not edit it manually.

logging.level.root: INFO
#logging.pattern.console: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-50.50(%logger{49}:%line)){cyan} %clr(:){faint} %m%n%wEx'
#logging.level.org.springframework.core.env.PropertySourcesPropertyResolver: DEBUG
#logging.level.org.springframework.security.oauth2: DEBUG
logging.level.org.springframework.web.socket: WARN
logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: WARN
#logging.level.org.apache.tomcat.jdbc.pool: TRACE
#logging.level.org.springframework.security: DEBUG
#logging.level.org.springframework.session: DEBUG
#logging.level.org.springframework.security.web: DEBUG
#logging.level.org.apache.catalina: TRACE
#logging.level.org.springframework.web: DEBUG
#logging.level.org.hibernate.SQL: DEBUG
#logging.level.org.hibernate.type: TRACE

custom.base-url: "http://localhost:${server.port}"

# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-email.html
# https://yandex.ru/support/mail-new/mail-clients.html
# https://stackoverflow.com/questions/411331/using-javamail-with-tls
spring.mail:
  testConnection: false
  host: smtp.yandex.ru 
  port: 465
  username: username 
  password: password 
  properties:
    # mail.smtp.starttls.enable: "true"
    mail.smtp.ssl.enable: "true"
    mail.smtp.connectiontimeout: 5000
    mail.smtp.timeout: 3000
    mail.smtp.writetimeout: 5000

custom.stomp.broker:
  host: "172.22.0.4"
  port: 61613
  virtual-host: /
  client-login: blog
  client-password: blogPazZw0rd
  system-login: blog
  system-password: blogPazZw0rd

# Postgres image store configuration
custom.image:
  max-bytes: 1048576 # 1 Mb. Must be < than tomcat file upload limit
  allowed-mime-types:
   - image/png
   - image/jpg
   - image/jpeg
  # value in seconds, passed in Cache-Control header
  max-age: 31536000


custom:
  email:
    from: "username@yandex.ru" 
  registration:
    email:  
      subject: "Registration confirmation"
      text-template: "Please open __REGISTRATION_LINK_PLACEHOLDER__ for complete registration __LOGIN__."
  confirmation:
    registration:
      token:
        ttl-minutes: 5
  password-reset:
    email:
      subject: "Password reset"
      text-template: "Link __PASSWORD_RESET_LINK_PLACEHOLDER__ for reset your password for account __LOGIN__. If you didn't issue password reset -- you can ignore this mail."
    token:
      ttl-minutes: 5
  tasks:
    enable: true
    poolSize: 10
    defaultLockAtMostForSec: 20
    defaultLockAtLeastForSec: 20
    images.clean:
      cron: "0 * * * * *"
    rendertron.cache.refresh:
      cron: "0 */30 * * * *"
    elasticsearch.refresh:
      cron: "0 0 */2 * * *"
  rendertron:
    serviceUrl: http://rendertron.example.com:3000/
  xss:
    iframe:
      allow:
        src:
          pattern: '^(https://www\.youtube\.com.*)|(https://coub\.com/.*)|(https://player\.vimeo\.com.*)|(https://asciinema\.org.*)$'


server.tomcat.accesslog.enabled: false
server.tomcat.accesslog.pattern: '%t %a "%r" %s (%D ms)'
server.port: 8080
server.servlet.session.persistent: true

server.tomcat.basedir: ${java.io.tmpdir}/com.github.nkonev.tomcat
server.servlet.session.store-dir: ${server.tomcat.basedir}/sessions


# this is URL
spring.mvc.static-path-pattern: /**
# You need to remove "file:..." element for production or you can to remove spring.resources.static-locations
# first element - for eliminate manual restart app in IntelliJ for copy compiled js to target/classes, last slash is important,, second element - for documentation
spring.resources.static-locations: file:backend/src/main/resources/static/, classpath:/static/


spring.jpa:
  database-platform: org.hibernate.dialect.PostgreSQLDialect
  open-in-view: false
  properties:
    hibernate.use_sql_comments: true
    hibernate.format_sql: true
    hibernate.generate_statistics: false
    hibernate.temp.use_jdbc_metadata_defaults: false
  hibernate.ddl-auto: validate

spring.datasource:
    name: blog_ds
    type: org.apache.tomcat.jdbc.pool.DataSource
    # https://jdbc.postgresql.org/documentation/head/connect.html#connection-parameters
    url: jdbc:postgresql://172.22.0.2:5432/blog?connectTimeout=10&socketTimeout=40
    username: blog
    password: "blogPazZw0rd"
    driverClassName: org.postgresql.Driver
    # https://docs.spring.io/spring-boot/docs/2.0.0.M7/reference/htmlsingle/#boot-features-connect-to-production-database
    # https://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
    # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-connect-to-production-database
    tomcat:
      minIdle: 4
      maxIdle: 8
      maxActive: 10
      maxWait: 60000
      testOnBorrow: true
      testOnConnect: true
      testWhileIdle: true
      timeBetweenEvictionRunsMillis: 5000
      validationQuery: SELECT 1;
      validationQueryTimeout: 4
      logValidationErrors: true

# https://docs.spring.io/spring-boot/docs/2.0.0.M7/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup
# https://flywaydb.org/documentation/configfiles
spring.flyway:
  locations: classpath:/db/migration
  drop-first: false
  schemas: migrations, auth, posts, images, settings
  out-of-order: true

spring.redis.url: redis://172.22.0.3:6379/0
spring.data.redis.repositories.enabled: false

spring.data.elasticsearch.cluster-name: elasticsearch
spring.data.elasticsearch.clusterNodes: 172.22.0.5:9300
spring.data.elasticsearch.repositories.enabled: false
spring.data.elasticsearch.properties.client.transport.nodes_sampler_interval: 40s
spring.data.elasticsearch.properties.client.transport.ping_timeout: 40s


management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always
management:
  server:
    port: 3010
    ssl:
      enabled: false
    add-application-context-header: false


facebook:
  client:
    clientId: 1684113965162824
    clientSecret: provide-it
    userAuthorizationUri: https://www.facebook.com/dialog/oauth
    accessTokenUri: https://graph.facebook.com/oauth/access_token
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://graph.facebook.com/me?fields=id,name,picture

vkontakte:
  client:
    clientId: 6805077
    clientSecret: provide-it
    userAuthorizationUri: https://oauth.vk.com/authorize
    accessTokenUri: https://oauth.vk.com/access_token
    tokenName: access_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://api.vk.com/method/users.get?v=5.92
